//! Functions for working with the flo_script DerivedState type

let prim @ { DerivedState, DerivedStateData } = import! flo.computed.prim

/// Flat_map implementation for the DerivedState type
let flat_map out_state in_state : forall b a . (a -> DerivedState b) -> DerivedState a -> DerivedState b =
    let resolve state_data : DerivedStateData -> (DerivedStateData, b) = 
        let (state_data, a_value)   = in_state.resolve state_data
        let out_state               = out_state a_value
        out_state.resolve state_data
    { resolve }

/// Wraps a constant value in a DerivedState monad
let wrap a : forall a . a -> DerivedState a = 
    let resolve state_data = (state_data, a)
    { resolve }

/// DerivedState functor
let functor: Functor DerivedState = {
    map = \f -> flat_map (\x -> wrap (f x))
}

/// DerivedState applicative
let applicative: Applicative DerivedState = 
    let apply f x = flat_map (\g -> flat_map (\y -> wrap (g y)) x) f
    { functor, apply, wrap }

/// DerivedState monad
let monad: Monad DerivedState =
    { applicative, flat_map }

{
    flat_map,
    wrap,
    functor,
    applicative,
    monad
}
